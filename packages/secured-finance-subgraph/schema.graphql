type Loan @entity {
  id: ID!
  lender: Bytes!
  lenderUser: User!
  borrower: Bytes!
  borrowUser: User!
  side: Int!
  currency: Int!
  term: Int
  amount: BigInt! # maybe BigInt!
  couponPayment: BigInt!
  rate: BigInt!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  presentValue: BigInt!
  currentTimestamp: BigInt!
  isAvailable: Boolean!
  startTxHash: Bytes!
  state: Int!

  schedule: LoanSchedule! @derivedFrom(field: "loan")
}

type LoanSchedule @entity {
  id: ID!
  
  payments: [SchedulePayment!]! @derivedFrom(field: "schedule")
  loan: Loan!
}

type SchedulePayment @entity {
  id: ID!
  notice: BigInt!
  payment: BigInt!
  amount: BigInt!
  isDone: Boolean!
  txHash: Bytes!

  schedule: LoanSchedule!
}

enum LoanState {
  REGISTERED
  WORKING
  DUE
  PAST_DUE
  CLOSED
  TERMINATED
}

enum CcyPair {
  FILETH 
  FILUSDC 
  ETHUSDC
  BTCUSDC
  BTCETH
  BTCFIL
}

enum FXSide {
  BID 
  OFFER
}

type Collateral @entity {
  id: ID!
  collateralID: String!
  user: User!
  userAddressETH: Bytes!
  userAddressFIL: Bytes!
  userAddressUSDC: Bytes!
  collateralAddressFIL: Bytes!
  collateralAddressUSDC: Bytes!
  collateralAmountETH: BigInt!
  collateralAmountFIL: BigInt!
  collateralAmountUSDC: BigInt!
  collateralAmountFILinETH: BigInt!
  collateralAmountUSDCinETH: BigInt!
  inuseETH: BigInt!
  inuseFIL: BigInt!
  inuseUSDC: BigInt!
  inuseFILinETH: BigInt!
  inuseUSDCinETH: BigInt!
  coverage: BigInt!
  isAvailable: Boolean!
  state: Int!
  filDepositTxHash: Bytes!
  createdAt: BigInt!
  updatedAt: BigInt!
}

enum CollateralState {
  EMPTY
  AVAILABLE
  IN_USE
  MARGIN_CALL
  LIQUIDATION_IN_PROGRESS
  LIQUIDATION
}

enum Ccy {
  ETH 
  FIL 
  USDC
  BTC
}

enum Side {
  LEND
  BORROW
}

enum Term {
  _3m
  _6m
  _1y
  _2y
  _3y
  _5y
}

type User @entity {
  id: ID!
  owner: Bytes!
  totalLendInETH: BigInt!
  totalBorrowInETH: BigInt!
  totalCollateralInETH: BigInt!

  updatedAt: BigInt!

  collateral: Collateral! @derivedFrom(field: "user")
  loans: [Loan!]! @derivedFrom(field: "lenderUser")
  borrows: [Loan!] @derivedFrom(field: "borrowUser")

  openOrders: [LendingMarketOrder!] @derivedFrom(field: "makerUser")

  madeOrders: [FilledLendingMarketOrder!] @derivedFrom(field: "makerUser")
  takenOrders: [FilledLendingMarketOrder!] @derivedFrom(field: "takerUser")
  # canceledOrders: [LendingMarketOrder!] @derivedFrom(field: "makerUser")
}

type LendingMarketController @entity {
  id: ID!

  # liquidity
  totalAvailableLiquidityETH: BigInt!
  totalLiquidityETH: BigInt!
  
  totalAvailableLiquidityFIL: BigInt!
  totalLiquidityFIL: BigInt!

  totalAvailableLiquidityBTC: BigInt!
  totalLiquidityBTC: BigInt!

  totalAvailableLiquidityUSDC: BigInt!
  totalLiquidityUSDC: BigInt!

  # liquidity in USD
  totalAvailableLiquidityInUSD: BigInt!
  totalLiquidityInUSD: BigInt!

  markets: [LendingMarket!] @derivedFrom(field: "controller")
  marketCount: Int!
}

type LendingMarket @entity {
  id: ID!
  controller: LendingMarketController!
  currency: Int!
  term: Int!
  spread: BigInt!
  marketRate: BigInt!
  orderCount: Int!

  # liquidity
  totalAvailableLiquidity: BigInt!
  totalLiquidity: BigInt!

  # liquidity in USD
  totalAvailableLiquidityInUSD: BigInt!
  totalLiquidityInUSD: BigInt!

  # creation timestamps
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # two-sided orderbook
  lendOrderbook: [LendingMarketOrderRow!] @derivedFrom(field: "lendMarket")
  borrowOrderbook: [LendingMarketOrderRow!] @derivedFrom(field: "borrowMarket")

  lendOrders: [LendingMarketOrder]! @derivedFrom(field: "lendingMarket")
  borrowOrders: [LendingMarketOrder]! @derivedFrom(field: "borrowingMarket")
  canceledOrders: [LendingMarketOrder]! @derivedFrom(field: "cancelMarket")

  tradeHistory: [FilledLendingMarketOrder!] @derivedFrom(field: "market")
}

type LendingMarketOrderRow @entity {
  id: ID!
  currency: Int!
  side: Int!
  lendMarket: LendingMarket!
  borrowMarket: LendingMarket!
  term: Int!
  rate: BigInt!
  orders: [LendingMarketOrder]! @derivedFrom(field: "row")
  totalAmount: BigInt!
  # totalUSDAmount: BigInt!

  # creation timestamps
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
}

type LendingMarketOrder @entity {
  id: ID!
  currency: Int!
  side: Int!
  row: LendingMarketOrderRow
  lendingMarket: LendingMarket
  borrowingMarket: LendingMarket
  cancelMarket: LendingMarket
  term: Int!
  rate: BigInt!
  amount: BigInt!
  deadline: BigInt!
  maker: Bytes!
  makerUser: User!

  # creation timestamps
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # # updated timestamps
  updatedAtTimestamp: BigInt!
  updatedAtBlockNumber: BigInt!
}

type FilledLendingMarketOrder @entity {
  id: ID!
  orderId: BigInt!
  currency: Int!
  side: Int!
  market: LendingMarket!
  term: Int!
  rate: BigInt!
  amount: BigInt!
  maker: Bytes!
  makerUser: User!
  taker: Bytes!
  takerUser: User!

  # creation timestamps
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
}
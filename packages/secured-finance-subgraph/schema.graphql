type Loan @entity {
  id: ID!
  lender: Bytes!
  lenderUser: User!
  borrower: Bytes!
  borrowUser: User!
  currency: Bytes!
  term: BigInt!
  notional: BigInt!
  couponPayment: BigInt!
  rate: BigInt!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  presentValue: BigInt!
  currentTimestamp: BigInt!
  isAvailable: Boolean!
  startTxHash: Bytes!
  state: Int!

  schedule: LoanSchedule! @derivedFrom(field: "loan")
  termination: LoanTermination @derivedFrom(field: "loan")
  novationHistory: [LoanNovation!] @derivedFrom(field: "loan")
}

type LoanSchedule @entity {
  id: ID!
  
  payments: [SchedulePayment!]! @derivedFrom(field: "schedule")
  loan: Loan!
}

type LoanTermination @entity {
  id: ID!
  terminationAsker: Bytes!
  terminationSubmitter: Bytes!
  terminationDate: BigInt!
  repayment: BigInt!
  loan: Loan!
}

type LoanNovation @entity {
  id: ID!
  previousLender: Bytes!
  newLender: Bytes!
  novationDate: BigInt!
  loan: Loan!
}

type SchedulePayment @entity {
  id: ID!
  notice: BigInt!
  payment: BigInt!
  amount: BigInt!
  isDone: Boolean!
  txHash: Bytes!

  schedule: LoanSchedule!
}

enum LoanState {
  REGISTERED
  WORKING
  DUE
  PAST_DUE
  CLOSED
  TERMINATED
}

# type Collateral @entity {
#   id: ID!
#   collateralID: String!
#   user: User!
#   userAddressETH: Bytes!
#   userAddressFIL: Bytes!
#   userAddressUSDC: Bytes!
#   collateralAddressFIL: Bytes!
#   collateralAddressUSDC: Bytes!
#   collateralAmountETH: BigInt!
#   collateralAmountFIL: BigInt!
#   collateralAmountUSDC: BigInt!
#   collateralAmountFILinETH: BigInt!
#   collateralAmountUSDCinETH: BigInt!
#   inuseETH: BigInt!
#   inuseFIL: BigInt!
#   inuseUSDC: BigInt!
#   inuseFILinETH: BigInt!
#   inuseUSDCinETH: BigInt!
#   coverage: BigInt!
#   isAvailable: Boolean!
#   state: Int!
#   filDepositTxHash: Bytes!
#   createdAt: BigInt!
#   updatedAt: BigInt!
# }

enum CollateralState {
  EMPTY
  AVAILABLE
  IN_USE
  MARGIN_CALL
  LIQUIDATION_IN_PROGRESS
  LIQUIDATION
}

enum Side {
  LEND
  BORROW
}


type User @entity {
  id: ID!
  owner: Bytes!
  totalLendInETH: BigInt!
  totalBorrowInETH: BigInt!
  # totalCollateralInETH: BigInt!

  updatedAt: BigInt!

  # collateral: Collateral! @derivedFrom(field: "user")
  loans: [Loan!]! @derivedFrom(field: "lenderUser")
  borrows: [Loan!] @derivedFrom(field: "borrowUser")

  closedLoans: [Loan!]! @derivedFrom(field: "lenderUser")
  closedBorrows: [Loan!] @derivedFrom(field: "borrowUser")

  openOrders: [LendingMarketOrder!] @derivedFrom(field: "makerUser")

  madeOrders: [FilledLendingMarketOrder!] @derivedFrom(field: "makerUser")
  takenOrders: [FilledLendingMarketOrder!] @derivedFrom(field: "takerUser")
  # canceledOrders: [LendingMarketOrder!] @derivedFrom(field: "makerUser")
}

type LendingMarketController @entity {
  id: ID!

  # liquidity
  totalAvailableLiquidityETH: BigInt!
  totalLiquidityETH: BigInt!
  
  totalAvailableLiquidityFIL: BigInt!
  totalLiquidityFIL: BigInt!

  totalAvailableLiquidityBTC: BigInt!
  totalLiquidityBTC: BigInt!

  totalAvailableLiquidityUSDC: BigInt!
  totalLiquidityUSDC: BigInt!

  # liquidity in USD
  totalAvailableLiquidityInUSD: BigInt!
  totalLiquidityInUSD: BigInt!

  markets: [LendingMarket!] @derivedFrom(field: "controller")
  marketCount: Int!
}

type LendingMarket @entity {
  id: ID!
  marketAddr: Bytes!
  controller: LendingMarketController!
  currency: Bytes!
  term: BigInt!
  spread: BigInt!
  marketRate: BigInt!
  orderCount: Int!

  # liquidity
  totalAvailableLiquidity: BigInt!
  totalLiquidity: BigInt!

  # liquidity in USD
  totalAvailableLiquidityInUSD: BigInt!
  totalLiquidityInUSD: BigInt!

  # creation timestamps
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # two-sided orderbook
  lendOrderbook: [LendingMarketOrderRow!] @derivedFrom(field: "lendMarket")
  borrowOrderbook: [LendingMarketOrderRow!] @derivedFrom(field: "borrowMarket")

  lendOrders: [LendingMarketOrder!] @derivedFrom(field: "lendingMarket")
  borrowOrders: [LendingMarketOrder!] @derivedFrom(field: "borrowingMarket")
  canceledOrders: [LendingMarketOrder!] @derivedFrom(field: "cancelMarket")

  tradeHistory: [FilledLendingMarketOrder!] @derivedFrom(field: "market")
}

type LendingMarketOrderRow @entity {
  id: ID!
  currency: Bytes!
  side: Int!
  marketAddr: Bytes!
  lendMarket: LendingMarket!
  borrowMarket: LendingMarket!
  term: BigInt!
  rate: BigInt!
  orders: [LendingMarketOrder!] @derivedFrom(field: "row")
  totalAmount: BigInt!
  # totalUSDAmount: BigInt!

  # creation timestamps
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
}

type LendingMarketOrder @entity {
  id: ID!
  orderId: BigInt!
  currency: Bytes!
  side: Int!
  row: LendingMarketOrderRow
  marketAddr: Bytes!
  lendingMarket: LendingMarket
  borrowingMarket: LendingMarket
  cancelMarket: LendingMarket
  term: BigInt!
  rate: BigInt!
  amount: BigInt!
  deadline: BigInt!
  maker: Bytes!
  makerUser: User!

  # creation timestamps
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # # updated timestamps
  updatedAtTimestamp: BigInt!
  updatedAtBlockNumber: BigInt!
}

type FilledLendingMarketOrder @entity {
  id: ID!
  orderId: BigInt!
  currency: Bytes!
  side: Int!
  market: LendingMarket!
  marketAddr: Bytes!
  term: BigInt!
  rate: BigInt!
  amount: BigInt!
  maker: Bytes!
  makerUser: User!
  taker: Bytes!
  takerUser: User!

  # creation timestamps
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
}

type Term @entity {
  id: ID!
  daysNum: BigInt!
  dfFrac: BigInt!
  paymentNum: BigInt!

  products: [Product!]! @derivedFrom(field: "terms")
  currencies: [Currency!]! @derivedFrom(field: "terms")
}

type Product @entity {
  id: ID!
  prefix: Bytes!
  productImplementation: Bytes!
  productController: Bytes!
  terms: [Term!]!
}

type Currency @entity {
  id: ID!
  identifier: Bytes!
  name: String!
  chainID: Int!
  ltv: BigInt!
  minMargin: BigInt!
  isSupported: Boolean!
  isCollateral: Boolean!
  terms: [Term!]!

  priceFeed: PriceFeed! @derivedFrom(field: "currency")
}

type PriceFeed @entity {
  id: ID!
  contract: Bytes!
  currency: Currency!
  pair: String!
}

type CloseOutNetting @entity {
  id: ID!
  address0: Bytes!
  address1: Bytes!
  packedAddresses: Bytes!
  aggregatedPayment0: BigInt!
  aggregatedPayment1: BigInt!
  netPayment: BigInt!
  currency: Currency!
  flipped: Boolean!
}

type TimeSlot @entity {
  id: ID!
  address0: Bytes!
  address1: Bytes!
  totalPayment0: BigInt!
  totalPayment1: BigInt!
  netPayment: BigInt!

  year: BigInt!
  month: BigInt!
  day: BigInt!
  position: Bytes!
  flipped: Boolean!
  paymentProof: Bytes!
  verificationParty: Bytes!
  verificationTimestamp: BigInt!

  settlementParty: Bytes!
  settlementTimestamp: BigInt!

  isSettled: Boolean!
  currency: Currency!
}